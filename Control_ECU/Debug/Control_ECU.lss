
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00002576  0000260a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080019c  0080019c  00002746  2**0
                  ALLOC
  3 .stab         0000246c  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ff  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006073  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006287  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 07 	call	0xf3c	; 0xf3c <main>
      8a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <BUZZER_init>:
 * Description:
 * 1. Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * 2. Turn off the buzzer through the GPIO.
 */
void BUZZER_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	66 e0       	ldi	r22, 0x06	; 6
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_setupPinDirection>
	GPIO_writePin (BUZZER_PORT, BUZZER_PIN, BUZZER_OFF);
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	66 e0       	ldi	r22, 0x06	; 6
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <BUZZER_on>:
/*
 * Description:
 * Function to enable the Buzzer through the GPIO.
 */
void BUZZER_on(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT, BUZZER_PIN, BUZZER_ON);
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	66 e0       	ldi	r22, 0x06	; 6
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <BUZZER_off>:
/*
 * Description:
 * Function to disable the Buzzer through the GPIO.
 */
void BUZZER_off(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT, BUZZER_PIN, BUZZER_OFF);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	66 e0       	ldi	r22, 0x06	; 6
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <main>:
 */
void timerCallBack_60Sec (void);


int main (void)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	64 97       	sbiw	r28, 0x14	; 20
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	BUZZER_init ();													/* Initialize buzzer */
     f50:	0e 94 75 07 	call	0xeea	; 0xeea <BUZZER_init>
	DcMotor_init ();												/* Initialize DC_motor */
     f54:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DcMotor_init>
	/* I2C configurations with address of 1 and 400 Kbit/sec (Fast Mode)*/
	TWI_ConfigType s_i2cConfiguration = {1, 400};
     f58:	ce 01       	movw	r24, r28
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9c 87       	std	Y+12, r25	; 0x0c
     f5e:	8b 87       	std	Y+11, r24	; 0x0b
     f60:	e9 e9       	ldi	r30, 0x99	; 153
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	fe 87       	std	Y+14, r31	; 0x0e
     f66:	ed 87       	std	Y+13, r30	; 0x0d
     f68:	f3 e0       	ldi	r31, 0x03	; 3
     f6a:	ff 87       	std	Y+15, r31	; 0x0f
     f6c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f6e:	fe 85       	ldd	r31, Y+14	; 0x0e
     f70:	00 80       	ld	r0, Z
     f72:	8d 85       	ldd	r24, Y+13	; 0x0d
     f74:	9e 85       	ldd	r25, Y+14	; 0x0e
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	9e 87       	std	Y+14, r25	; 0x0e
     f7a:	8d 87       	std	Y+13, r24	; 0x0d
     f7c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f7e:	fc 85       	ldd	r31, Y+12	; 0x0c
     f80:	00 82       	st	Z, r0
     f82:	8b 85       	ldd	r24, Y+11	; 0x0b
     f84:	9c 85       	ldd	r25, Y+12	; 0x0c
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9c 87       	std	Y+12, r25	; 0x0c
     f8a:	8b 87       	std	Y+11, r24	; 0x0b
     f8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f8e:	91 50       	subi	r25, 0x01	; 1
     f90:	9f 87       	std	Y+15, r25	; 0x0f
     f92:	ef 85       	ldd	r30, Y+15	; 0x0f
     f94:	ee 23       	and	r30, r30
     f96:	51 f7       	brne	.-44     	; 0xf6c <main+0x30>
	TWI_init (&s_i2cConfiguration);
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <TWI_init>
	/* UART configurations with 8 Bits data, No parity, one stop bit and 9600 baud rate*/
	UART_ConfigType s_uartConfiguration = {EIGHT_BITS, DISABLED, ONE_BIT, 9600};
     fa0:	ce 01       	movw	r24, r28
     fa2:	04 96       	adiw	r24, 0x04	; 4
     fa4:	99 8b       	std	Y+17, r25	; 0x11
     fa6:	88 8b       	std	Y+16, r24	; 0x10
     fa8:	e2 e9       	ldi	r30, 0x92	; 146
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	fb 8b       	std	Y+19, r31	; 0x13
     fae:	ea 8b       	std	Y+18, r30	; 0x12
     fb0:	f7 e0       	ldi	r31, 0x07	; 7
     fb2:	fc 8b       	std	Y+20, r31	; 0x14
     fb4:	ea 89       	ldd	r30, Y+18	; 0x12
     fb6:	fb 89       	ldd	r31, Y+19	; 0x13
     fb8:	00 80       	ld	r0, Z
     fba:	8a 89       	ldd	r24, Y+18	; 0x12
     fbc:	9b 89       	ldd	r25, Y+19	; 0x13
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	9b 8b       	std	Y+19, r25	; 0x13
     fc2:	8a 8b       	std	Y+18, r24	; 0x12
     fc4:	e8 89       	ldd	r30, Y+16	; 0x10
     fc6:	f9 89       	ldd	r31, Y+17	; 0x11
     fc8:	00 82       	st	Z, r0
     fca:	88 89       	ldd	r24, Y+16	; 0x10
     fcc:	99 89       	ldd	r25, Y+17	; 0x11
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	99 8b       	std	Y+17, r25	; 0x11
     fd2:	88 8b       	std	Y+16, r24	; 0x10
     fd4:	9c 89       	ldd	r25, Y+20	; 0x14
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	9c 8b       	std	Y+20, r25	; 0x14
     fda:	ec 89       	ldd	r30, Y+20	; 0x14
     fdc:	ee 23       	and	r30, r30
     fde:	51 f7       	brne	.-44     	; 0xfb4 <main+0x78>
	UART_init (&s_uartConfiguration);
     fe0:	ce 01       	movw	r24, r28
     fe2:	04 96       	adiw	r24, 0x04	; 4
     fe4:	0e 94 b9 10 	call	0x2172	; 0x2172 <UART_init>
	SET_BIT (SREG, 7);												/* Enable I-bit */
     fe8:	af e5       	ldi	r26, 0x5F	; 95
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ef e5       	ldi	r30, 0x5F	; 95
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 68       	ori	r24, 0x80	; 128
     ff4:	8c 93       	st	X, r24

	for(;;)
	{
		/* When there is no matching between new and confirmation passwords receive new password again */
		if (g_matchingFlag == 0)
     ff6:	80 91 9c 01 	lds	r24, 0x019C
     ffa:	88 23       	and	r24, r24
     ffc:	19 f4       	brne	.+6      	; 0x1004 <main+0xc8>
		{
			recieveCheckNewPassword ();
     ffe:	0e 94 67 08 	call	0x10ce	; 0x10ce <recieveCheckNewPassword>
    1002:	f9 cf       	rjmp	.-14     	; 0xff6 <main+0xba>
		}
		/* When the new pass and confirmation are matched start the system options by receiving the user choice*/
		else if (g_matchingFlag == 1)
    1004:	80 91 9c 01 	lds	r24, 0x019C
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a9 f7       	brne	.-22     	; 0xff6 <main+0xba>
		{
			getDefinedPassword ();
    100c:	0e 94 45 09 	call	0x128a	; 0x128a <getDefinedPassword>
    1010:	f2 cf       	rjmp	.-28     	; 0xff6 <main+0xba>

00001012 <timerCallBack_15Sec>:
 * Timer1 first call back function after counting 15 seconds:
 * 1. First call stops the motor for 3 seconds after 15 seconds and initialize the timer for counting 3 seconds.
 * 2. Second call stops the motor after gate is closed and de-initialise the timer.
 */
void timerCallBack_15Sec (void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <timerCallBack_15Sec+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter = 0;
	counter++;
    101c:	80 91 9d 01 	lds	r24, 0x019D
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 9d 01 	sts	0x019D, r24
	switch (counter)
    1026:	80 91 9d 01 	lds	r24, 0x019D
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3a 83       	std	Y+2, r19	; 0x02
    1030:	29 83       	std	Y+1, r18	; 0x01
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	91 05       	cpc	r25, r1
    103a:	31 f0       	breq	.+12     	; 0x1048 <timerCallBack_15Sec+0x36>
    103c:	29 81       	ldd	r18, Y+1	; 0x01
    103e:	3a 81       	ldd	r19, Y+2	; 0x02
    1040:	24 30       	cpi	r18, 0x04	; 4
    1042:	31 05       	cpc	r19, r1
    1044:	71 f0       	breq	.+28     	; 0x1062 <timerCallBack_15Sec+0x50>
    1046:	13 c0       	rjmp	.+38     	; 0x106e <timerCallBack_15Sec+0x5c>
	{
	case 2:

		DcMotor_stop ();						   /* Stop the motor after being unlocking for 15 seconds */
    1048:	0e 94 c4 0a 	call	0x1588	; 0x1588 <DcMotor_stop>
		TIMER1_deInit ();
    104c:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER1_deInit>
		TIMER1_setCallBack (timerCallBack_3Sec);   /* Set the second call back */
    1050:	8c e3       	ldi	r24, 0x3C	; 60
    1052:	98 e0       	ldi	r25, 0x08	; 8
    1054:	0e 94 99 10 	call	0x2132	; 0x2132 <TIMER1_setCallBack>
		TIMER1_init (&s_timerConfigurations_3Sec); /* Start to count 3 seconds for door to start locking again */
    1058:	86 e8       	ldi	r24, 0x86	; 134
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 39 10 	call	0x2072	; 0x2072 <TIMER1_init>
    1060:	06 c0       	rjmp	.+12     	; 0x106e <timerCallBack_15Sec+0x5c>
		break;
	case 4:
		DcMotor_stop ();						   /* Stop the motor after being locked again */
    1062:	0e 94 c4 0a 	call	0x1588	; 0x1588 <DcMotor_stop>
		TIMER1_deInit ();						   /* De_initialize the timer */
    1066:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER1_deInit>
		counter = 0;
    106a:	10 92 9d 01 	sts	0x019D, r1
	}
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <timerCallBack_3Sec>:
 * Description:
 * Timer1 second call back function after counting 3 seconds:
 * 1. After being called initialize the timer for counting another 15 seconds for the door to start locking.
 */
void timerCallBack_3Sec (void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	DcMotor_rotate (CCW, 100);					/* rotate motor CCW after being stopped for 3 seconds */
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	64 e6       	ldi	r22, 0x64	; 100
    1084:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DcMotor_rotate>
	TIMER1_deInit ();
    1088:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER1_deInit>
	TIMER1_init (&s_timerConfigurations_15Sec); /* Start to count 15 seconds for door to be locked again */
    108c:	80 e8       	ldi	r24, 0x80	; 128
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 39 10 	call	0x2072	; 0x2072 <TIMER1_init>
	TIMER1_setCallBack (timerCallBack_15Sec);   /* Set the first call back */
    1094:	89 e0       	ldi	r24, 0x09	; 9
    1096:	98 e0       	ldi	r25, 0x08	; 8
    1098:	0e 94 99 10 	call	0x2132	; 0x2132 <TIMER1_setCallBack>
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <timerCallBack_60Sec>:
 * Description:
 * Timer1 third call back function after counting 1 minute:
 * 1. After being called stops the buzzer ringing which started when 3 consecutive passwords are wrong.
 */
void timerCallBack_60Sec (void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter = 0;
	counter++;
    10aa:	80 91 9e 01 	lds	r24, 0x019E
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 9e 01 	sts	0x019E, r24
	/* Because it takes 8 ISR to count 1 minute */
	if (counter == 8)
    10b4:	80 91 9e 01 	lds	r24, 0x019E
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <timerCallBack_60Sec+0x26>
	{
		BUZZER_off ();							/* Stop the buzzer after 1 minute */
    10bc:	0e 94 92 07 	call	0xf24	; 0xf24 <BUZZER_off>
		TIMER1_deInit ();						/* De_initialize the timer */
    10c0:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER1_deInit>
		counter = 0;
    10c4:	10 92 9e 01 	sts	0x019E, r1
	}
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <recieveCheckNewPassword>:
 * 2. Compare the 2 passwords.
 * 3. If matched, send the confirm byte to HMI_ECU and save the password in EEPROM.
 * 4. If not matched, send the wrong byte to HMI_ECU and repeat again.
 */
void recieveCheckNewPassword (void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	60 97       	sbiw	r28, 0x10	; 16
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    10e2:	18 8a       	std	Y+16, r1	; 0x10
	uint8 breaking = 5;
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	8f 87       	std	Y+15, r24	; 0x0f

	/* Receive the 2 passwords */
	UART_receiveString (g_passArray);
    10e8:	88 e6       	ldi	r24, 0x68	; 104
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 8d 11 	call	0x231a	; 0x231a <UART_receiveString>
	UART_receiveString (g_repeatedPassArray);
    10f0:	80 e7       	ldi	r24, 0x70	; 112
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 8d 11 	call	0x231a	; 0x231a <UART_receiveString>
    10f8:	16 c0       	rjmp	.+44     	; 0x1126 <recieveCheckNewPassword+0x58>

	/* Compare the 2 passwords */
	while ((g_passArray[i] != '\0') && (g_repeatedPassArray[i] != '\0'))
	{
		if (g_passArray[i] != g_repeatedPassArray[i])
    10fa:	88 89       	ldd	r24, Y+16	; 0x10
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	e8 59       	subi	r30, 0x98	; 152
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	20 81       	ld	r18, Z
    1108:	88 89       	ldd	r24, Y+16	; 0x10
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	fc 01       	movw	r30, r24
    1110:	e0 59       	subi	r30, 0x90	; 144
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	80 81       	ld	r24, Z
    1116:	28 17       	cp	r18, r24
    1118:	c1 f4       	brne	.+48     	; 0x114a <recieveCheckNewPassword+0x7c>
		{
			break;
		}
		i++;
    111a:	88 89       	ldd	r24, Y+16	; 0x10
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	88 8b       	std	Y+16, r24	; 0x10
		breaking--;
    1120:	8f 85       	ldd	r24, Y+15	; 0x0f
    1122:	81 50       	subi	r24, 0x01	; 1
    1124:	8f 87       	std	Y+15, r24	; 0x0f
	/* Receive the 2 passwords */
	UART_receiveString (g_passArray);
	UART_receiveString (g_repeatedPassArray);

	/* Compare the 2 passwords */
	while ((g_passArray[i] != '\0') && (g_repeatedPassArray[i] != '\0'))
    1126:	88 89       	ldd	r24, Y+16	; 0x10
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	fc 01       	movw	r30, r24
    112e:	e8 59       	subi	r30, 0x98	; 152
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	88 23       	and	r24, r24
    1136:	49 f0       	breq	.+18     	; 0x114a <recieveCheckNewPassword+0x7c>
    1138:	88 89       	ldd	r24, Y+16	; 0x10
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	e0 59       	subi	r30, 0x90	; 144
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	c1 f6       	brne	.-80     	; 0x10fa <recieveCheckNewPassword+0x2c>
		i++;
		breaking--;
	}

	/* Success Case */
	if (breaking == 0)
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	88 23       	and	r24, r24
    114e:	09 f0       	breq	.+2      	; 0x1152 <recieveCheckNewPassword+0x84>
    1150:	90 c0       	rjmp	.+288    	; 0x1272 <recieveCheckNewPassword+0x1a4>
	{
		UART_sendByte (CONFIRM_BYTE);                                         /* Send confirm byte */
    1152:	83 e6       	ldi	r24, 0x63	; 99
    1154:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		g_matchingFlag = 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 9c 01 	sts	0x019C, r24
		for (i = 0; i < 5; i++)
    115e:	18 8a       	std	Y+16, r1	; 0x10
    1160:	83 c0       	rjmp	.+262    	; 0x1268 <recieveCheckNewPassword+0x19a>
		{
			EEPROM_writeByte ((uint16)(EEPROM_ADDRESS + i), g_passArray[i]);  /* Save password in EEPROM */
    1162:	88 89       	ldd	r24, Y+16	; 0x10
    1164:	48 2f       	mov	r20, r24
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	88 89       	ldd	r24, Y+16	; 0x10
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	fc 01       	movw	r30, r24
    1170:	e8 59       	subi	r30, 0x98	; 152
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	20 81       	ld	r18, Z
    1176:	ca 01       	movw	r24, r20
    1178:	62 2f       	mov	r22, r18
    117a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <EEPROM_writeByte>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e2       	ldi	r26, 0x20	; 32
    1184:	b1 e4       	ldi	r27, 0x41	; 65
    1186:	8b 87       	std	Y+11, r24	; 0x0b
    1188:	9c 87       	std	Y+12, r25	; 0x0c
    118a:	ad 87       	std	Y+13, r26	; 0x0d
    118c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1190:	7c 85       	ldd	r23, Y+12	; 0x0c
    1192:	8d 85       	ldd	r24, Y+13	; 0x0d
    1194:	9e 85       	ldd	r25, Y+14	; 0x0e
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a ef       	ldi	r20, 0xFA	; 250
    119c:	54 e4       	ldi	r21, 0x44	; 68
    119e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	8f 83       	std	Y+7, r24	; 0x07
    11a8:	98 87       	std	Y+8, r25	; 0x08
    11aa:	a9 87       	std	Y+9, r26	; 0x09
    11ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e8       	ldi	r20, 0x80	; 128
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c2:	88 23       	and	r24, r24
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <recieveCheckNewPassword+0x102>
		__ticks = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <recieveCheckNewPassword+0x180>
	else if (__tmp > 65535)
    11d0:	6f 81       	ldd	r22, Y+7	; 0x07
    11d2:	78 85       	ldd	r23, Y+8	; 0x08
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	3f ef       	ldi	r19, 0xFF	; 255
    11dc:	4f e7       	ldi	r20, 0x7F	; 127
    11de:	57 e4       	ldi	r21, 0x47	; 71
    11e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11e4:	18 16       	cp	r1, r24
    11e6:	4c f5       	brge	.+82     	; 0x123a <recieveCheckNewPassword+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <recieveCheckNewPassword+0x162>
    1212:	88 ec       	ldi	r24, 0xC8	; 200
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <recieveCheckNewPassword+0x150>
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <recieveCheckNewPassword+0x144>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <recieveCheckNewPassword+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <recieveCheckNewPassword+0x18c>
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	/* Success Case */
	if (breaking == 0)
	{
		UART_sendByte (CONFIRM_BYTE);                                         /* Send confirm byte */
		g_matchingFlag = 1;
		for (i = 0; i < 5; i++)
    1262:	88 89       	ldd	r24, Y+16	; 0x10
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	88 8b       	std	Y+16, r24	; 0x10
    1268:	88 89       	ldd	r24, Y+16	; 0x10
    126a:	85 30       	cpi	r24, 0x05	; 5
    126c:	08 f4       	brcc	.+2      	; 0x1270 <recieveCheckNewPassword+0x1a2>
    126e:	79 cf       	rjmp	.-270    	; 0x1162 <recieveCheckNewPassword+0x94>
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <recieveCheckNewPassword+0x1aa>
		}
	}
	/* Fail Case */
	else
	{
		UART_sendByte (WRONG_BYTE);											  /* Send wrong byte */
    1272:	87 e7       	ldi	r24, 0x77	; 119
    1274:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
	}
}
    1278:	60 96       	adiw	r28, 0x10	; 16
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <getDefinedPassword>:
 * 4. If not matched, send repeat byte to HMI_ECU to ask for password 2 more times.
 * 5. If matched in the 2 next iterations take the action.
 * 6. If not matched in the 3 iterations, send wrong byte to HMI_ECU and start the buzzer.
 */
void getDefinedPassword (void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	61 97       	sbiw	r28, 0x11	; 17
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    129e:	19 8a       	std	Y+17, r1	; 0x11
	uint8 breaking = 5;
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	88 8b       	std	Y+16, r24	; 0x10
	uint8 recieved = 0;
    12a4:	1f 86       	std	Y+15, r1	; 0x0f
	static uint8 wrongIterations = 0;										  /* For counting the wrong pass */

	UART_receiveString (g_definedPassArray);								  /* Receive the user input pass */
    12a6:	88 e7       	ldi	r24, 0x78	; 120
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 8d 11 	call	0x231a	; 0x231a <UART_receiveString>

	/* Receive the pass stored in EEPROM */
	for (i = 0; i < 5; i++)
    12ae:	19 8a       	std	Y+17, r1	; 0x11
    12b0:	82 c0       	rjmp	.+260    	; 0x13b6 <getDefinedPassword+0x12c>
	{
		EEPROM_readByte ((uint16)(EEPROM_ADDRESS + i), g_repeatedPassArray + i);
    12b2:	89 89       	ldd	r24, Y+17	; 0x11
    12b4:	48 2f       	mov	r20, r24
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	89 89       	ldd	r24, Y+17	; 0x11
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 01       	movw	r18, r24
    12c0:	20 59       	subi	r18, 0x90	; 144
    12c2:	3e 4f       	sbci	r19, 0xFE	; 254
    12c4:	ca 01       	movw	r24, r20
    12c6:	b9 01       	movw	r22, r18
    12c8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <EEPROM_readByte>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e2       	ldi	r26, 0x20	; 32
    12d2:	b1 e4       	ldi	r27, 0x41	; 65
    12d4:	8b 87       	std	Y+11, r24	; 0x0b
    12d6:	9c 87       	std	Y+12, r25	; 0x0c
    12d8:	ad 87       	std	Y+13, r26	; 0x0d
    12da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12de:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8f 83       	std	Y+7, r24	; 0x07
    12f6:	98 87       	std	Y+8, r25	; 0x08
    12f8:	a9 87       	std	Y+9, r26	; 0x09
    12fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fc:	6f 81       	ldd	r22, Y+7	; 0x07
    12fe:	78 85       	ldd	r23, Y+8	; 0x08
    1300:	89 85       	ldd	r24, Y+9	; 0x09
    1302:	9a 85       	ldd	r25, Y+10	; 0x0a
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <getDefinedPassword+0x94>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	3f c0       	rjmp	.+126    	; 0x139c <getDefinedPassword+0x112>
	else if (__tmp > 65535)
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <getDefinedPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6b 85       	ldd	r22, Y+11	; 0x0b
    1338:	7c 85       	ldd	r23, Y+12	; 0x0c
    133a:	8d 85       	ldd	r24, Y+13	; 0x0d
    133c:	9e 85       	ldd	r25, Y+14	; 0x0e
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	0f c0       	rjmp	.+30     	; 0x137e <getDefinedPassword+0xf4>
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <getDefinedPassword+0xe2>
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <getDefinedPassword+0xd6>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <getDefinedPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6f 81       	ldd	r22, Y+7	; 0x07
    138a:	78 85       	ldd	r23, Y+8	; 0x08
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <getDefinedPassword+0x11e>
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
	static uint8 wrongIterations = 0;										  /* For counting the wrong pass */

	UART_receiveString (g_definedPassArray);								  /* Receive the user input pass */

	/* Receive the pass stored in EEPROM */
	for (i = 0; i < 5; i++)
    13b0:	89 89       	ldd	r24, Y+17	; 0x11
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	89 8b       	std	Y+17, r24	; 0x11
    13b6:	89 89       	ldd	r24, Y+17	; 0x11
    13b8:	85 30       	cpi	r24, 0x05	; 5
    13ba:	08 f4       	brcc	.+2      	; 0x13be <getDefinedPassword+0x134>
    13bc:	7a cf       	rjmp	.-268    	; 0x12b2 <getDefinedPassword+0x28>
	{
		EEPROM_readByte ((uint16)(EEPROM_ADDRESS + i), g_repeatedPassArray + i);
		_delay_ms (10);
	}
	g_repeatedPassArray[i] = '\0';
    13be:	89 89       	ldd	r24, Y+17	; 0x11
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	e0 59       	subi	r30, 0x90	; 144
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	10 82       	st	Z, r1

	/* Start comparing the 2 passwords */
	i = 0;
    13cc:	19 8a       	std	Y+17, r1	; 0x11
    13ce:	16 c0       	rjmp	.+44     	; 0x13fc <getDefinedPassword+0x172>
	while ((g_definedPassArray[i] != '\0') && (g_repeatedPassArray[i] != '\0'))
	{
		if (g_definedPassArray[i] != g_repeatedPassArray[i])
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	fc 01       	movw	r30, r24
    13d8:	e8 58       	subi	r30, 0x88	; 136
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	20 81       	ld	r18, Z
    13de:	89 89       	ldd	r24, Y+17	; 0x11
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	fc 01       	movw	r30, r24
    13e6:	e0 59       	subi	r30, 0x90	; 144
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	80 81       	ld	r24, Z
    13ec:	28 17       	cp	r18, r24
    13ee:	c1 f4       	brne	.+48     	; 0x1420 <getDefinedPassword+0x196>
		{
			break;
		}
		i++;
    13f0:	89 89       	ldd	r24, Y+17	; 0x11
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	89 8b       	std	Y+17, r24	; 0x11
		breaking--;
    13f6:	88 89       	ldd	r24, Y+16	; 0x10
    13f8:	81 50       	subi	r24, 0x01	; 1
    13fa:	88 8b       	std	Y+16, r24	; 0x10
	}
	g_repeatedPassArray[i] = '\0';

	/* Start comparing the 2 passwords */
	i = 0;
	while ((g_definedPassArray[i] != '\0') && (g_repeatedPassArray[i] != '\0'))
    13fc:	89 89       	ldd	r24, Y+17	; 0x11
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	fc 01       	movw	r30, r24
    1404:	e8 58       	subi	r30, 0x88	; 136
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	80 81       	ld	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	49 f0       	breq	.+18     	; 0x1420 <getDefinedPassword+0x196>
    140e:	89 89       	ldd	r24, Y+17	; 0x11
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	fc 01       	movw	r30, r24
    1416:	e0 59       	subi	r30, 0x90	; 144
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	c1 f6       	brne	.-80     	; 0x13d0 <getDefinedPassword+0x146>
		}
		i++;
		breaking--;
	}
	/* Success Case */
	if (breaking == 0)
    1420:	88 89       	ldd	r24, Y+16	; 0x10
    1422:	88 23       	and	r24, r24
    1424:	f1 f4       	brne	.+60     	; 0x1462 <getDefinedPassword+0x1d8>
	{
		UART_sendByte (CONFIRM_BYTE);                                         /* Send confirm byte */
    1426:	83 e6       	ldi	r24, 0x63	; 99
    1428:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		recieved = UART_recieveByte ();										  /* Receive the user choice */
    142c:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
    1430:	8f 87       	std	Y+15, r24	; 0x0f
		wrongIterations = 0;
    1432:	10 92 9f 01 	sts	0x019F, r1
		if (recieved == '+')												  /* If open the door */
    1436:	8f 85       	ldd	r24, Y+15	; 0x0f
    1438:	8b 32       	cpi	r24, 0x2B	; 43
    143a:	69 f4       	brne	.+26     	; 0x1456 <getDefinedPassword+0x1cc>
		{
			DcMotor_rotate (CW, 100);										  /* Start rotating the motor CW */
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	64 e6       	ldi	r22, 0x64	; 100
    1440:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DcMotor_rotate>
			TIMER1_setCallBack (timerCallBack_15Sec);
    1444:	89 e0       	ldi	r24, 0x09	; 9
    1446:	98 e0       	ldi	r25, 0x08	; 8
    1448:	0e 94 99 10 	call	0x2132	; 0x2132 <TIMER1_setCallBack>
			TIMER1_init (&s_timerConfigurations_15Sec);						  /* Rotate for 15 seconds */
    144c:	80 e8       	ldi	r24, 0x80	; 128
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 39 10 	call	0x2072	; 0x2072 <TIMER1_init>
    1454:	22 c0       	rjmp	.+68     	; 0x149a <getDefinedPassword+0x210>
		}
		else if (recieved == '-')											  /* If change pass */
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	8d 32       	cpi	r24, 0x2D	; 45
    145a:	f9 f4       	brne	.+62     	; 0x149a <getDefinedPassword+0x210>
		{
			g_matchingFlag = 0;												  /* For calling recieveCheckNewPassword */
    145c:	10 92 9c 01 	sts	0x019C, r1
    1460:	1c c0       	rjmp	.+56     	; 0x149a <getDefinedPassword+0x210>
		}
	}
	/* Fail Case */
	else
	{
		wrongIterations++;													  /* Increment wrong iterations */
    1462:	80 91 9f 01 	lds	r24, 0x019F
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	80 93 9f 01 	sts	0x019F, r24
		if (wrongIterations == 3)											  /* If it reaches 3 */
    146c:	80 91 9f 01 	lds	r24, 0x019F
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	81 f4       	brne	.+32     	; 0x1494 <getDefinedPassword+0x20a>
		{
			UART_sendByte (WRONG_BYTE);										  /* Send wrong byte */
    1474:	87 e7       	ldi	r24, 0x77	; 119
    1476:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
			TIMER1_setCallBack (timerCallBack_60Sec);
    147a:	81 e5       	ldi	r24, 0x51	; 81
    147c:	98 e0       	ldi	r25, 0x08	; 8
    147e:	0e 94 99 10 	call	0x2132	; 0x2132 <TIMER1_setCallBack>
			TIMER1_init (&s_timerConfigurations_60Sec);						  /* Start counting 60 seconds */
    1482:	8c e8       	ldi	r24, 0x8C	; 140
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 39 10 	call	0x2072	; 0x2072 <TIMER1_init>
			BUZZER_on ();													  /* Start the buzzer */
    148a:	0e 94 86 07 	call	0xf0c	; 0xf0c <BUZZER_on>
			wrongIterations = 0;											  /* Restart the wrong iterations again */
    148e:	10 92 9f 01 	sts	0x019F, r1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <getDefinedPassword+0x210>
		}
		else
		{
			UART_sendByte (REPEAT_BYTE);									  /* If less than 3 send repeat */
    1494:	82 e7       	ldi	r24, 0x72	; 114
    1496:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		}
	}
}
    149a:	61 96       	adiw	r28, 0x11	; 17
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <DcMotor_init>:
 * Description :
 * 1. The Function responsible for setup the direction for the two motor pins.
 * 2. Stop the DC-Motor at the beginning.
 */
void DcMotor_init (void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	/* Set the two motor pins as output pins */
	GPIO_setupPinDirection (DC_PORT, DC_IN1_PIN, PIN_OUTPUT);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	66 e0       	ldi	r22, 0x06	; 6
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_PORT, DC_IN2_PIN, PIN_OUTPUT);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	67 e0       	ldi	r22, 0x07	; 7
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_setupPinDirection>

	/* Stop the motor at the beginning */
	GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	66 e0       	ldi	r22, 0x06	; 6
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
	GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	67 e0       	ldi	r22, 0x07	; 7
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DcMotor_rotate>:
 * 1. The function responsible for rotate the DC Motor CW/ or CCW or
 * stop the motor based on the direction input value.
 * 2. Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_rotate (DcMotor_Direction dir, uint8 speed)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DcMotor_rotate+0x6>
    14e8:	0f 92       	push	r0
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle = 0;
    14f2:	19 82       	std	Y+1, r1	; 0x01

	/* Set the out put of the two motor pins to change its rotation direction depending on the input */
	if (dir == CW)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 23       	and	r24, r24
    14f8:	59 f4       	brne	.+22     	; 0x1510 <DcMotor_rotate+0x2e>
	{
		GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	66 e0       	ldi	r22, 0x06	; 6
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
		GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_HIGH);
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	67 e0       	ldi	r22, 0x07	; 7
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
    150e:	0d c0       	rjmp	.+26     	; 0x152a <DcMotor_rotate+0x48>
	}

	else if (dir == CCW)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	51 f4       	brne	.+20     	; 0x152a <DcMotor_rotate+0x48>
	{
		GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_HIGH);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	66 e0       	ldi	r22, 0x06	; 6
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
		GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
	}

	/* The equation to transform the speed into duty cycle and send to the timer driver */
	dutyCycle = (uint8)(((float32)speed / DC_MAX_SPEED) * 100);
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	48 ec       	ldi	r20, 0xC8	; 200
    154a:	52 e4       	ldi	r21, 0x42	; 66
    154c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	48 ec       	ldi	r20, 0xC8	; 200
    155e:	52 e4       	ldi	r21, 0x42	; 66
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_start (dutyCycle);
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <PWM_Timer0_start>
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <DcMotor_stop>:
 * Description :
 * 1. The Function responsible for stop the motor rotation by stoping the two motor pins.
 * 2. Stop PWM wave generation.
 */
void DcMotor_stop (void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	DcMotor_rotate (CW, DC_MIN_SPEED);                    /* Stop the PWM wave generation */
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DcMotor_rotate>
	GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);       /* Stop the first motor pin */
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
	GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);       /* Stop the second motor pin */
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	67 e0       	ldi	r22, 0x07	; 7
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <GPIO_writePin>
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <EEPROM_writeByte+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <EEPROM_writeByte+0x8>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15c4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15c8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    15cc:	88 30       	cpi	r24, 0x08	; 8
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <EEPROM_writeByte+0x22>
        return ERROR;
    15d0:	1c 82       	std	Y+4, r1	; 0x04
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	80 70       	andi	r24, 0x00	; 0
    15da:	97 70       	andi	r25, 0x07	; 7
    15dc:	88 0f       	add	r24, r24
    15de:	89 2f       	mov	r24, r25
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 0b       	sbc	r25, r25
    15e4:	91 95       	neg	r25
    15e6:	80 6a       	ori	r24, 0xA0	; 160
    15e8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15ec:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    15f0:	88 31       	cpi	r24, 0x18	; 24
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <EEPROM_writeByte+0x46>
        return ERROR; 
    15f4:	1c 82       	std	Y+4, r1	; 0x04
    15f6:	16 c0       	rjmp	.+44     	; 0x1624 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15fe:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1602:	88 32       	cpi	r24, 0x28	; 40
    1604:	11 f0       	breq	.+4      	; 0x160a <EEPROM_writeByte+0x58>
        return ERROR;
    1606:	1c 82       	std	Y+4, r1	; 0x04
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1610:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1614:	88 32       	cpi	r24, 0x28	; 40
    1616:	11 f0       	breq	.+4      	; 0x161c <EEPROM_writeByte+0x6a>
        return ERROR;
    1618:	1c 82       	std	Y+4, r1	; 0x04
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    161c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <TWI_stop>
	
    return SUCCESS;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	8c 83       	std	Y+4, r24	; 0x04
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <EEPROM_readByte+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <EEPROM_readByte+0x8>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	7c 83       	std	Y+4, r23	; 0x04
    1648:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    164a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    164e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	11 f0       	breq	.+4      	; 0x165a <EEPROM_readByte+0x26>
        return ERROR;
    1656:	1d 82       	std	Y+5, r1	; 0x05
    1658:	44 c0       	rjmp	.+136    	; 0x16e2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	80 70       	andi	r24, 0x00	; 0
    1660:	97 70       	andi	r25, 0x07	; 7
    1662:	88 0f       	add	r24, r24
    1664:	89 2f       	mov	r24, r25
    1666:	88 1f       	adc	r24, r24
    1668:	99 0b       	sbc	r25, r25
    166a:	91 95       	neg	r25
    166c:	80 6a       	ori	r24, 0xA0	; 160
    166e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1672:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1676:	88 31       	cpi	r24, 0x18	; 24
    1678:	11 f0       	breq	.+4      	; 0x167e <EEPROM_readByte+0x4a>
        return ERROR;
    167a:	1d 82       	std	Y+5, r1	; 0x05
    167c:	32 c0       	rjmp	.+100    	; 0x16e2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1684:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1688:	88 32       	cpi	r24, 0x28	; 40
    168a:	11 f0       	breq	.+4      	; 0x1690 <EEPROM_readByte+0x5c>
        return ERROR;
    168c:	1d 82       	std	Y+5, r1	; 0x05
    168e:	29 c0       	rjmp	.+82     	; 0x16e2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1690:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1694:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    1698:	80 31       	cpi	r24, 0x10	; 16
    169a:	11 f0       	breq	.+4      	; 0x16a0 <EEPROM_readByte+0x6c>
        return ERROR;
    169c:	1d 82       	std	Y+5, r1	; 0x05
    169e:	21 c0       	rjmp	.+66     	; 0x16e2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	80 70       	andi	r24, 0x00	; 0
    16a6:	97 70       	andi	r25, 0x07	; 7
    16a8:	88 0f       	add	r24, r24
    16aa:	89 2f       	mov	r24, r25
    16ac:	88 1f       	adc	r24, r24
    16ae:	99 0b       	sbc	r25, r25
    16b0:	91 95       	neg	r25
    16b2:	81 6a       	ori	r24, 0xA1	; 161
    16b4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    16b8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    16bc:	80 34       	cpi	r24, 0x40	; 64
    16be:	11 f0       	breq	.+4      	; 0x16c4 <EEPROM_readByte+0x90>
        return ERROR;
    16c0:	1d 82       	std	Y+5, r1	; 0x05
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    16c4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <TWI_readByteWithNACK>
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    16ce:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <TWI_getStatus>
    16d2:	88 35       	cpi	r24, 0x58	; 88
    16d4:	11 f0       	breq	.+4      	; 0x16da <EEPROM_readByte+0xa6>
        return ERROR;
    16d6:	1d 82       	std	Y+5, r1	; 0x05
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    16da:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <TWI_stop>

    return SUCCESS;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <GPIO_setupPinDirection+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <GPIO_setupPinDirection+0x8>
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	6a 83       	std	Y+2, r22	; 0x02
    1706:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	08 f0       	brcs	.+2      	; 0x1710 <GPIO_setupPinDirection+0x1c>
    170e:	d5 c0       	rjmp	.+426    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	84 30       	cpi	r24, 0x04	; 4
    1714:	08 f0       	brcs	.+2      	; 0x1718 <GPIO_setupPinDirection+0x24>
    1716:	d1 c0       	rjmp	.+418    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3d 83       	std	Y+5, r19	; 0x05
    1720:	2c 83       	std	Y+4, r18	; 0x04
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <GPIO_setupPinDirection+0x3a>
    172c:	43 c0       	rjmp	.+134    	; 0x17b4 <GPIO_setupPinDirection+0xc0>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <GPIO_setupPinDirection+0x4e>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	71 f0       	breq	.+28     	; 0x175c <GPIO_setupPinDirection+0x68>
    1740:	bc c0       	rjmp	.+376    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <GPIO_setupPinDirection+0x5a>
    174c:	5f c0       	rjmp	.+190    	; 0x180c <GPIO_setupPinDirection+0x118>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <GPIO_setupPinDirection+0x66>
    1758:	85 c0       	rjmp	.+266    	; 0x1864 <GPIO_setupPinDirection+0x170>
    175a:	af c0       	rjmp	.+350    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1762:	aa e3       	ldi	r26, 0x3A	; 58
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ea e3       	ldi	r30, 0x3A	; 58
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_setupPinDirection+0x8c>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_setupPinDirection+0x88>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	98 c0       	rjmp	.+304    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    178a:	aa e3       	ldi	r26, 0x3A	; 58
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ea e3       	ldi	r30, 0x3A	; 58
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_setupPinDirection+0xb4>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_setupPinDirection+0xb0>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	83 c0       	rjmp	.+262    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17ba:	a7 e3       	ldi	r26, 0x37	; 55
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e7 e3       	ldi	r30, 0x37	; 55
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_setupPinDirection+0xe4>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_setupPinDirection+0xe0>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	6c c0       	rjmp	.+216    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17e2:	a7 e3       	ldi	r26, 0x37	; 55
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 e3       	ldi	r30, 0x37	; 55
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_setupPinDirection+0x10c>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_setupPinDirection+0x108>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	57 c0       	rjmp	.+174    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	a1 f4       	brne	.+40     	; 0x183a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1812:	a4 e3       	ldi	r26, 0x34	; 52
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e4 e3       	ldi	r30, 0x34	; 52
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_setupPinDirection+0x13c>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_setupPinDirection+0x138>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	40 c0       	rjmp	.+128    	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    183a:	a4 e3       	ldi	r26, 0x34	; 52
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e4 e3       	ldi	r30, 0x34	; 52
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_setupPinDirection+0x164>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_setupPinDirection+0x160>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	2b c0       	rjmp	.+86     	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	a1 f4       	brne	.+40     	; 0x1892 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    186a:	a1 e3       	ldi	r26, 0x31	; 49
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_setupPinDirection+0x194>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_setupPinDirection+0x190>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1892:	a1 e3       	ldi	r26, 0x31	; 49
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e1 e3       	ldi	r30, 0x31	; 49
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_setupPinDirection+0x1bc>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_setupPinDirection+0x1b8>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <GPIO_writePin+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <GPIO_writePin+0x8>
    18d2:	0f 92       	push	r0
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	6a 83       	std	Y+2, r22	; 0x02
    18dc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <GPIO_writePin+0x1c>
    18e4:	d5 c0       	rjmp	.+426    	; 0x1a90 <GPIO_writePin+0x1c6>
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <GPIO_writePin+0x24>
    18ec:	d1 c0       	rjmp	.+418    	; 0x1a90 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3d 83       	std	Y+5, r19	; 0x05
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <GPIO_writePin+0x3a>
    1902:	43 c0       	rjmp	.+134    	; 0x198a <GPIO_writePin+0xc0>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <GPIO_writePin+0x4e>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	71 f0       	breq	.+28     	; 0x1932 <GPIO_writePin+0x68>
    1916:	bc c0       	rjmp	.+376    	; 0x1a90 <GPIO_writePin+0x1c6>
    1918:	2c 81       	ldd	r18, Y+4	; 0x04
    191a:	3d 81       	ldd	r19, Y+5	; 0x05
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <GPIO_writePin+0x5a>
    1922:	5f c0       	rjmp	.+190    	; 0x19e2 <GPIO_writePin+0x118>
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	91 05       	cpc	r25, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <GPIO_writePin+0x66>
    192e:	85 c0       	rjmp	.+266    	; 0x1a3a <GPIO_writePin+0x170>
    1930:	af c0       	rjmp	.+350    	; 0x1a90 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	a1 f4       	brne	.+40     	; 0x1960 <GPIO_writePin+0x96>
			{
				SET_BIT (PORTA, pin_num);
    1938:	ab e3       	ldi	r26, 0x3B	; 59
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	eb e3       	ldi	r30, 0x3B	; 59
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_writePin+0x8c>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_writePin+0x88>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	98 c0       	rjmp	.+304    	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTA, pin_num);
    1960:	ab e3       	ldi	r26, 0x3B	; 59
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_writePin+0xb4>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_writePin+0xb0>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	83 c0       	rjmp	.+262    	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <GPIO_writePin+0xee>
			{
				SET_BIT (PORTB, pin_num);
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_writePin+0xe4>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_writePin+0xe0>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	6c c0       	rjmp	.+216    	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTB, pin_num);
    19b8:	a8 e3       	ldi	r26, 0x38	; 56
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 e3       	ldi	r30, 0x38	; 56
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_writePin+0x10c>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_writePin+0x108>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	57 c0       	rjmp	.+174    	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <GPIO_writePin+0x146>
			{
				SET_BIT (PORTC, pin_num);
    19e8:	a5 e3       	ldi	r26, 0x35	; 53
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e5 e3       	ldi	r30, 0x35	; 53
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_writePin+0x13c>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_writePin+0x138>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	40 c0       	rjmp	.+128    	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTC, pin_num);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_writePin+0x164>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_writePin+0x160>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	2b c0       	rjmp	.+86     	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	a1 f4       	brne	.+40     	; 0x1a68 <GPIO_writePin+0x19e>
			{
				SET_BIT (PORTD, pin_num);
    1a40:	a2 e3       	ldi	r26, 0x32	; 50
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e2 e3       	ldi	r30, 0x32	; 50
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_writePin+0x194>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_writePin+0x190>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTD, pin_num);
    1a68:	a2 e3       	ldi	r26, 0x32	; 50
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e2 e3       	ldi	r30, 0x32	; 50
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_writePin+0x1bc>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_writePin+0x1b8>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
			}
		}
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <GPIO_readPin+0x6>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <GPIO_readPin+0x8>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <GPIO_readPin+0xa>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    1ab2:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	88 30       	cpi	r24, 0x08	; 8
    1ab8:	18 f4       	brcc	.+6      	; 0x1ac0 <GPIO_readPin+0x20>
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	84 30       	cpi	r24, 0x04	; 4
    1abe:	18 f0       	brcs	.+6      	; 0x1ac6 <GPIO_readPin+0x26>
	{
		/* Return logic low if the pin is not exist */
		return pinValue;
    1ac0:	29 81       	ldd	r18, Y+1	; 0x01
    1ac2:	2e 83       	std	Y+6, r18	; 0x06
    1ac4:	82 c0       	rjmp	.+260    	; 0x1bca <GPIO_readPin+0x12a>
	}
	else
	{
		/* Return the pin value as required */
		switch (port_num)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	48 2f       	mov	r20, r24
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	5d 83       	std	Y+5, r21	; 0x05
    1ace:	4c 83       	std	Y+4, r20	; 0x04
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	79 f1       	breq	.+94     	; 0x1b38 <GPIO_readPin+0x98>
    1ada:	2c 81       	ldd	r18, Y+4	; 0x04
    1adc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	34 f4       	brge	.+12     	; 0x1af0 <GPIO_readPin+0x50>
    1ae4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ae6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ae8:	41 15       	cp	r20, r1
    1aea:	51 05       	cpc	r21, r1
    1aec:	69 f0       	breq	.+26     	; 0x1b08 <GPIO_readPin+0x68>
    1aee:	6b c0       	rjmp	.+214    	; 0x1bc6 <GPIO_readPin+0x126>
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	b9 f1       	breq	.+110    	; 0x1b68 <GPIO_readPin+0xc8>
    1afa:	2c 81       	ldd	r18, Y+4	; 0x04
    1afc:	3d 81       	ldd	r19, Y+5	; 0x05
    1afe:	23 30       	cpi	r18, 0x03	; 3
    1b00:	31 05       	cpc	r19, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <GPIO_readPin+0x66>
    1b04:	49 c0       	rjmp	.+146    	; 0x1b98 <GPIO_readPin+0xf8>
    1b06:	5f c0       	rjmp	.+190    	; 0x1bc6 <GPIO_readPin+0x126>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num))
    1b08:	e9 e3       	ldi	r30, 0x39	; 57
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <GPIO_readPin+0x80>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <GPIO_readPin+0x7c>
    1b24:	ca 01       	movw	r24, r20
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <GPIO_readPin+0x94>
			{
				pinValue = LOGIC_HIGH;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	49 c0       	rjmp	.+146    	; 0x1bc6 <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	47 c0       	rjmp	.+142    	; 0x1bc6 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num))
    1b38:	e6 e3       	ldi	r30, 0x36	; 54
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_readPin+0xb0>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_readPin+0xac>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	88 23       	and	r24, r24
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <GPIO_readPin+0xc4>
			{
				pinValue = LOGIC_HIGH;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	31 c0       	rjmp	.+98     	; 0x1bc6 <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1b64:	19 82       	std	Y+1, r1	; 0x01
    1b66:	2f c0       	rjmp	.+94     	; 0x1bc6 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num))
    1b68:	e3 e3       	ldi	r30, 0x33	; 51
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a9 01       	movw	r20, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_readPin+0xe0>
    1b7c:	55 95       	asr	r21
    1b7e:	47 95       	ror	r20
    1b80:	8a 95       	dec	r24
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_readPin+0xdc>
    1b84:	ca 01       	movw	r24, r20
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	88 23       	and	r24, r24
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <GPIO_readPin+0xf4>
			{
				pinValue = LOGIC_HIGH;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	19 c0       	rjmp	.+50     	; 0x1bc6 <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	17 c0       	rjmp	.+46     	; 0x1bc6 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num))
    1b98:	e0 e3       	ldi	r30, 0x30	; 48
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a9 01       	movw	r20, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_readPin+0x110>
    1bac:	55 95       	asr	r21
    1bae:	47 95       	ror	r20
    1bb0:	8a 95       	dec	r24
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_readPin+0x10c>
    1bb4:	ca 01       	movw	r24, r20
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	90 70       	andi	r25, 0x00	; 0
    1bba:	88 23       	and	r24, r24
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <GPIO_readPin+0x124>
			{
				pinValue = LOGIC_HIGH;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
			}
		}

	}
	return pinValue;
    1bc6:	59 81       	ldd	r21, Y+1	; 0x01
    1bc8:	5e 83       	std	Y+6, r21	; 0x06
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1bcc:	26 96       	adiw	r28, 0x06	; 6
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <GPIO_setupPortDirection+0x6>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <GPIO_setupPortDirection+0x8>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	90 f5       	brcc	.+100    	; 0x1c58 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	d1 f0       	breq	.+52     	; 0x1c3c <GPIO_setupPortDirection+0x5e>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <GPIO_setupPortDirection+0x3e>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <GPIO_setupPortDirection+0x54>
    1c1a:	1e c0       	rjmp	.+60     	; 0x1c58 <GPIO_setupPortDirection+0x7a>
    1c1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <GPIO_setupPortDirection+0x68>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <GPIO_setupPortDirection+0x72>
    1c30:	13 c0       	rjmp	.+38     	; 0x1c58 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c32:	ea e3       	ldi	r30, 0x3A	; 58
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	80 83       	st	Z, r24
    1c3a:	0e c0       	rjmp	.+28     	; 0x1c58 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c3c:	e7 e3       	ldi	r30, 0x37	; 55
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c46:	e4 e3       	ldi	r30, 0x34	; 52
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <GPIO_writePort+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <GPIO_writePort+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	84 30       	cpi	r24, 0x04	; 4
    1c7a:	90 f5       	brcc	.+100    	; 0x1ce0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port with the input value */
		switch(port_num)
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3c 83       	std	Y+4, r19	; 0x04
    1c84:	2b 83       	std	Y+3, r18	; 0x03
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	d1 f0       	breq	.+52     	; 0x1cc4 <GPIO_writePort+0x5e>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <GPIO_writePort+0x3e>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <GPIO_writePort+0x54>
    1ca2:	1e c0       	rjmp	.+60     	; 0x1ce0 <GPIO_writePort+0x7a>
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <GPIO_writePort+0x68>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	83 30       	cpi	r24, 0x03	; 3
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <GPIO_writePort+0x72>
    1cb8:	13 c0       	rjmp	.+38     	; 0x1ce0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cba:	eb e3       	ldi	r30, 0x3B	; 59
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 83       	st	Z, r24
    1cc2:	0e c0       	rjmp	.+28     	; 0x1ce0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cc4:	e8 e3       	ldi	r30, 0x38	; 56
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 83       	st	Z, r24
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cd8:	e2 e3       	ldi	r30, 0x32	; 50
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
		}
	}
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <GPIO_readPort+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <GPIO_readPort+0x8>
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue = LOGIC_LOW;
    1cfe:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	18 f0       	brcs	.+6      	; 0x1d0c <GPIO_readPort+0x1e>
	{
		/* Return logic low if the port is not exist */
		return portValue;
    1d06:	29 81       	ldd	r18, Y+1	; 0x01
    1d08:	2d 83       	std	Y+5, r18	; 0x05
    1d0a:	34 c0       	rjmp	.+104    	; 0x1d74 <GPIO_readPort+0x86>
	}
	else
	{
		/* Return the port value */
		switch(port_num)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3c 83       	std	Y+4, r19	; 0x04
    1d14:	2b 83       	std	Y+3, r18	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	d1 f0       	breq	.+52     	; 0x1d54 <GPIO_readPort+0x66>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <GPIO_readPort+0x46>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	61 f0       	breq	.+24     	; 0x1d4a <GPIO_readPort+0x5c>
    1d32:	1e c0       	rjmp	.+60     	; 0x1d70 <GPIO_readPort+0x82>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <GPIO_readPort+0x70>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	81 f0       	breq	.+32     	; 0x1d68 <GPIO_readPort+0x7a>
    1d48:	13 c0       	rjmp	.+38     	; 0x1d70 <GPIO_readPort+0x82>
		{
		case PORTA_ID:
			portValue = PINA;
    1d4a:	e9 e3       	ldi	r30, 0x39	; 57
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			portValue = PINB;
    1d54:	e6 e3       	ldi	r30, 0x36	; 54
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	09 c0       	rjmp	.+18     	; 0x1d70 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			portValue = PINC;
    1d5e:	e3 e3       	ldi	r30, 0x33	; 51
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			portValue = PIND;
    1d68:	e0 e3       	ldi	r30, 0x30	; 48
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return portValue;
    1d70:	99 81       	ldd	r25, Y+1	; 0x01
    1d72:	9d 83       	std	Y+5, r25	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <TWI_init>:
#include "i2c.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <TWI_init+0xa>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate using zero pre-scaler TWPS=00 */
	TWSR = 0x00;
    1d98:	e1 e2       	ldi	r30, 0x21	; 33
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	10 82       	st	Z, r1
    TWBR = (uint8)(((uint16)1000 * F_CPU) - (16 * Config_Ptr -> bitRate)) / (2 * Config_Ptr -> bitRate);
    1d9e:	00 e2       	ldi	r16, 0x20	; 32
    1da0:	10 e0       	ldi	r17, 0x00	; 0
    1da2:	e9 81       	ldd	r30, Y+1	; 0x01
    1da4:	fa 81       	ldd	r31, Y+2	; 0x02
    1da6:	81 81       	ldd	r24, Z+1	; 0x01
    1da8:	92 81       	ldd	r25, Z+2	; 0x02
    1daa:	82 95       	swap	r24
    1dac:	92 95       	swap	r25
    1dae:	90 7f       	andi	r25, 0xF0	; 240
    1db0:	98 27       	eor	r25, r24
    1db2:	80 7f       	andi	r24, 0xF0	; 240
    1db4:	98 27       	eor	r25, r24
    1db6:	81 95       	neg	r24
    1db8:	48 2f       	mov	r20, r24
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	81 81       	ldd	r24, Z+1	; 0x01
    1dc2:	92 81       	ldd	r25, Z+2	; 0x02
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	ca 01       	movw	r24, r20
    1dcc:	b9 01       	movw	r22, r18
    1dce:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodhi4>
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: ON */
    TWAR = ((Config_Ptr -> address) << 1) | 1;
    1dd8:	a2 e2       	ldi	r26, 0x22	; 34
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	80 81       	ld	r24, Z
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	81 60       	ori	r24, 0x01	; 1
    1dec:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1dee:	e6 e5       	ldi	r30, 0x56	; 86
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	84 e0       	ldi	r24, 0x04	; 4
    1df4:	80 83       	st	Z, r24
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <TWI_start>:

void TWI_start(void)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1e0c:	e6 e5       	ldi	r30, 0x56	; 86
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	84 ea       	ldi	r24, 0xA4	; 164
    1e12:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e14:	e6 e5       	ldi	r30, 0x56	; 86
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 23       	and	r24, r24
    1e1c:	dc f7       	brge	.-10     	; 0x1e14 <TWI_start+0x10>
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <TWI_stop>:

void TWI_stop(void)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e2c:	e6 e5       	ldi	r30, 0x56	; 86
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	84 e9       	ldi	r24, 0x94	; 148
    1e32:	80 83       	st	Z, r24
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e46:	e3 e2       	ldi	r30, 0x23	; 35
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e4e:	e6 e5       	ldi	r30, 0x56	; 86
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	84 e8       	ldi	r24, 0x84	; 132
    1e54:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e56:	e6 e5       	ldi	r30, 0x56	; 86
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 23       	and	r24, r24
    1e5e:	dc f7       	brge	.-10     	; 0x1e56 <TWI_writeByte+0x1c>
}
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e70:	e6 e5       	ldi	r30, 0x56	; 86
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	84 ec       	ldi	r24, 0xC4	; 196
    1e76:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e78:	e6 e5       	ldi	r30, 0x56	; 86
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 23       	and	r24, r24
    1e80:	dc f7       	brge	.-10     	; 0x1e78 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1e82:	e3 e2       	ldi	r30, 0x23	; 35
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e96:	e6 e5       	ldi	r30, 0x56	; 86
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	84 e8       	ldi	r24, 0x84	; 132
    1e9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 23       	and	r24, r24
    1ea6:	dc f7       	brge	.-10     	; 0x1e9e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1ea8:	e3 e2       	ldi	r30, 0x23	; 35
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ebe:	e1 e2       	ldi	r30, 0x21	; 33
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 7f       	andi	r24, 0xF8	; 248
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <PWM_Timer0_start>:
 *3. Setup the compare value based on the required input duty cycle
 *4. Setup the direction for OC0 as output pin through the GPIO driver.
 *5. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_start(uint8 duty_cycle)
{
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;                       /* Set timer register initial value to 0 */
    1ee2:	e2 e5       	ldi	r30, 0x52	; 82
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	10 82       	st	Z, r1
	/* Fast PWM Mode WGM01 = 1 & WGM00 = 1 */
	SET_BIT (TCCR0, WGM00);
    1ee8:	a3 e5       	ldi	r26, 0x53	; 83
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e3 e5       	ldi	r30, 0x53	; 83
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	80 64       	ori	r24, 0x40	; 64
    1ef4:	8c 93       	st	X, r24
	SET_BIT (TCCR0, WGM01);
    1ef6:	a3 e5       	ldi	r26, 0x53	; 83
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e3 e5       	ldi	r30, 0x53	; 83
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	88 60       	ori	r24, 0x08	; 8
    1f02:	8c 93       	st	X, r24

	SET_BIT (TCCR0, COM01);          /* Clear OC0 when match occurs (non inverted mode) COM00 = 0 & COM01 = 1 */
    1f04:	a3 e5       	ldi	r26, 0x53	; 83
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e3 e5       	ldi	r30, 0x53	; 83
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 62       	ori	r24, 0x20	; 32
    1f10:	8c 93       	st	X, r24
	/* Clock = F_CPU/64 by making CS00 = 1, CS01 = 1, CS02 = 0 */
	SET_BIT (TCCR0, CS00);
    1f12:	a3 e5       	ldi	r26, 0x53	; 83
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e3 e5       	ldi	r30, 0x53	; 83
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	81 60       	ori	r24, 0x01	; 1
    1f1e:	8c 93       	st	X, r24
	SET_BIT (TCCR0, CS01);
    1f20:	a3 e5       	ldi	r26, 0x53	; 83
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e3 e5       	ldi	r30, 0x53	; 83
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	8c 93       	st	X, r24
	OCR0 = ceil ((duty_cycle / 100.0) * TIMER0_TOP_VALUE);    /* Set compare value */
    1f2e:	0c e5       	ldi	r16, 0x5C	; 92
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	aa 27       	eor	r26, r26
    1f3a:	97 fd       	sbrc	r25, 7
    1f3c:	a0 95       	com	r26
    1f3e:	ba 2f       	mov	r27, r26
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	48 ec       	ldi	r20, 0xC8	; 200
    1f56:	52 e4       	ldi	r21, 0x42	; 66
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 3d 12 	call	0x247a	; 0x247a <ceil>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 83       	st	Z, r24
	GPIO_setupPinDirection (PORTB_ID, PIN3_ID, PIN_OUTPUT);   /* Configure PB3/OC0 as output pin */
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	63 e0       	ldi	r22, 0x03	; 3
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_setupPinDirection>
}
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <__vector_7>:
 *                                    ISR                                      *
 *******************************************************************************/

/* For calling the call back functions */
ISR (TIMER1_COMPA_vect)
{
    1fa6:	1f 92       	push	r1
    1fa8:	0f 92       	push	r0
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	0f 92       	push	r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	2f 93       	push	r18
    1fb2:	3f 93       	push	r19
    1fb4:	4f 93       	push	r20
    1fb6:	5f 93       	push	r21
    1fb8:	6f 93       	push	r22
    1fba:	7f 93       	push	r23
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	af 93       	push	r26
    1fc2:	bf 93       	push	r27
    1fc4:	ef 93       	push	r30
    1fc6:	ff 93       	push	r31
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    1fd0:	80 91 a0 01 	lds	r24, 0x01A0
    1fd4:	90 91 a1 01 	lds	r25, 0x01A1
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	29 f0       	breq	.+10     	; 0x1fe6 <__vector_7+0x40>
		{
			(*g_callBack_Ptr)();
    1fdc:	e0 91 a0 01 	lds	r30, 0x01A0
    1fe0:	f0 91 a1 01 	lds	r31, 0x01A1
    1fe4:	09 95       	icall
		}
}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	ff 91       	pop	r31
    1fec:	ef 91       	pop	r30
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	7f 91       	pop	r23
    1ff8:	6f 91       	pop	r22
    1ffa:	5f 91       	pop	r21
    1ffc:	4f 91       	pop	r20
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    2036:	80 91 a0 01 	lds	r24, 0x01A0
    203a:	90 91 a1 01 	lds	r25, 0x01A1
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	29 f0       	breq	.+10     	; 0x204c <__vector_9+0x40>
	{
		(*g_callBack_Ptr)();
    2042:	e0 91 a0 01 	lds	r30, 0x01A0
    2046:	f0 91 a1 01 	lds	r31, 0x01A1
    204a:	09 95       	icall
	}
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	ff 91       	pop	r31
    2052:	ef 91       	pop	r30
    2054:	bf 91       	pop	r27
    2056:	af 91       	pop	r26
    2058:	9f 91       	pop	r25
    205a:	8f 91       	pop	r24
    205c:	7f 91       	pop	r23
    205e:	6f 91       	pop	r22
    2060:	5f 91       	pop	r21
    2062:	4f 91       	pop	r20
    2064:	3f 91       	pop	r19
    2066:	2f 91       	pop	r18
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <TIMER1_init>:
 * 2. Set the compare value if needed.
 * 3. Select the required pre-scaler.
 * 4. Select the timer mode.
 */
void TIMER1_init(const TIMER1_ConfigType * Config_Ptr)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <TIMER1_init+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <TIMER1_init+0x8>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0x0C;       											/* For selecting non_PWM mode */
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8c e0       	ldi	r24, 0x0C	; 12
    2088:	80 83       	st	Z, r24
	TCCR1B = ((Config_Ptr -> mode) & 0x0F) << 4;        			/* For selecting the mode */
    208a:	ae e4       	ldi	r26, 0x4E	; 78
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	85 81       	ldd	r24, Z+5	; 0x05
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	82 95       	swap	r24
    209a:	92 95       	swap	r25
    209c:	90 7f       	andi	r25, 0xF0	; 240
    209e:	98 27       	eor	r25, r24
    20a0:	80 7f       	andi	r24, 0xF0	; 240
    20a2:	98 27       	eor	r25, r24
    20a4:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler) & 0x07);	/* For selecting the pre-scaler */
    20a6:	ae e4       	ldi	r26, 0x4E	; 78
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	ee e4       	ldi	r30, 0x4E	; 78
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	98 2f       	mov	r25, r24
    20b2:	98 7f       	andi	r25, 0xF8	; 248
    20b4:	e9 81       	ldd	r30, Y+1	; 0x01
    20b6:	fa 81       	ldd	r31, Y+2	; 0x02
    20b8:	84 81       	ldd	r24, Z+4	; 0x04
    20ba:	87 70       	andi	r24, 0x07	; 7
    20bc:	89 2b       	or	r24, r25
    20be:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr -> initial_value;							/* Set the initial timer value */
    20c0:	ac e4       	ldi	r26, 0x4C	; 76
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	11 96       	adiw	r26, 0x01	; 1
    20ce:	9c 93       	st	X, r25
    20d0:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr -> compare_value;							/* Set the required compare value */
    20d2:	aa e4       	ldi	r26, 0x4A	; 74
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e9 81       	ldd	r30, Y+1	; 0x01
    20d8:	fa 81       	ldd	r31, Y+2	; 0x02
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	11 96       	adiw	r26, 0x01	; 1
    20e0:	9c 93       	st	X, r25
    20e2:	8e 93       	st	-X, r24
	/* Enable the Interrupts for the module */
	switch (Config_Ptr -> mode)
    20e4:	e9 81       	ldd	r30, Y+1	; 0x01
    20e6:	fa 81       	ldd	r31, Y+2	; 0x02
    20e8:	85 81       	ldd	r24, Z+5	; 0x05
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3c 83       	std	Y+4, r19	; 0x04
    20f0:	2b 83       	std	Y+3, r18	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	31 f0       	breq	.+12     	; 0x2106 <TIMER1_init+0x94>
    20fa:	2b 81       	ldd	r18, Y+3	; 0x03
    20fc:	3c 81       	ldd	r19, Y+4	; 0x04
    20fe:	24 30       	cpi	r18, 0x04	; 4
    2100:	31 05       	cpc	r19, r1
    2102:	49 f0       	breq	.+18     	; 0x2116 <TIMER1_init+0xa4>
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <TIMER1_init+0xb2>
	{
	case NORMAL:
		SET_BIT(TIMSK, TOIE1);
    2106:	a9 e5       	ldi	r26, 0x59	; 89
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e9 e5       	ldi	r30, 0x59	; 89
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	84 60       	ori	r24, 0x04	; 4
    2112:	8c 93       	st	X, r24
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <TIMER1_init+0xb2>
		break;
	case CTC:
		SET_BIT(TIMSK, OCIE1A);
    2116:	a9 e5       	ldi	r26, 0x59	; 89
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e9 e5       	ldi	r30, 0x59	; 89
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 61       	ori	r24, 0x10	; 16
    2122:	8c 93       	st	X, r24
	}
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <TIMER1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER1_setCallBack(void(*a_ptr)(void))
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <TIMER1_setCallBack+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_Ptr = (volatile void*)a_ptr;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	90 93 a1 01 	sts	0x01A1, r25
    2148:	80 93 a0 01 	sts	0x01A0, r24
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <TIMER1_deInit>:
/*
 * Description:
 * Function to disable the Timer1.
 */
void TIMER1_deInit(void)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0xF8) | (0);                                 /* Stop the clock source */
    215e:	ae e4       	ldi	r26, 0x4E	; 78
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	ee e4       	ldi	r30, 0x4E	; 78
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	88 7f       	andi	r24, 0xF8	; 248
    216a:	8c 93       	st	X, r24
}
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <UART_init+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <UART_init+0x8>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2182:	1a 82       	std	Y+2, r1	; 0x02
    2184:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2186:	eb e2       	ldi	r30, 0x2B	; 43
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    218e:	ea e2       	ldi	r30, 0x2A	; 42
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	88 e1       	ldi	r24, 0x18	; 24
    2194:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT (UCSRA, URSEL);
    2196:	ab e2       	ldi	r26, 0x2B	; 43
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb e2       	ldi	r30, 0x2B	; 43
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 68       	ori	r24, 0x80	; 128
    21a2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> en_parity & 0x03) << 4); /* Select the type of parity bit */
    21a4:	a0 e4       	ldi	r26, 0x40	; 64
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e0 e4       	ldi	r30, 0x40	; 64
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	2f 7c       	andi	r18, 0xCF	; 207
    21b2:	eb 81       	ldd	r30, Y+3	; 0x03
    21b4:	fc 81       	ldd	r31, Y+4	; 0x04
    21b6:	81 81       	ldd	r24, Z+1	; 0x01
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	83 70       	andi	r24, 0x03	; 3
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	82 95       	swap	r24
    21c2:	92 95       	swap	r25
    21c4:	90 7f       	andi	r25, 0xF0	; 240
    21c6:	98 27       	eor	r25, r24
    21c8:	80 7f       	andi	r24, 0xF0	; 240
    21ca:	98 27       	eor	r25, r24
    21cc:	82 2b       	or	r24, r18
    21ce:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> en_stop   & 0x01) << 3); /* Select number of stop bits */
    21d0:	a0 e4       	ldi	r26, 0x40	; 64
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e0 e4       	ldi	r30, 0x40	; 64
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	27 7f       	andi	r18, 0xF7	; 247
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	81 70       	andi	r24, 0x01	; 1
    21ea:	90 70       	andi	r25, 0x00	; 0
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	82 2b       	or	r24, r18
    21fa:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF8) | (Config_Ptr -> en_data    & 0x07);       /* Select number of data bits */
    21fc:	a0 e4       	ldi	r26, 0x40	; 64
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e0 e4       	ldi	r30, 0x40	; 64
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	98 2f       	mov	r25, r24
    2208:	98 7f       	andi	r25, 0xF8	; 248
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	80 81       	ld	r24, Z
    2210:	87 70       	andi	r24, 0x07	; 7
    2212:	89 2b       	or	r24, r25
    2214:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baudRate * 8UL))) - 1);
    2216:	eb 81       	ldd	r30, Y+3	; 0x03
    2218:	fc 81       	ldd	r31, Y+4	; 0x04
    221a:	83 81       	ldd	r24, Z+3	; 0x03
    221c:	94 81       	ldd	r25, Z+4	; 0x04
    221e:	a5 81       	ldd	r26, Z+5	; 0x05
    2220:	b6 81       	ldd	r27, Z+6	; 0x06
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	aa 1f       	adc	r26, r26
    2228:	bb 1f       	adc	r27, r27
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	aa 1f       	adc	r26, r26
    2230:	bb 1f       	adc	r27, r27
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	aa 1f       	adc	r26, r26
    2238:	bb 1f       	adc	r27, r27
    223a:	9c 01       	movw	r18, r24
    223c:	ad 01       	movw	r20, r26
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	92 e1       	ldi	r25, 0x12	; 18
    2242:	aa e7       	ldi	r26, 0x7A	; 122
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodsi4>
    224e:	da 01       	movw	r26, r20
    2250:	c9 01       	movw	r24, r18
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2258:	e0 e4       	ldi	r30, 0x40	; 64
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	89 2f       	mov	r24, r25
    2262:	99 27       	eor	r25, r25
    2264:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2266:	e9 e2       	ldi	r30, 0x29	; 41
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 83       	st	Z, r24
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	0f 92       	push	r0
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2288:	eb e2       	ldi	r30, 0x2B	; 43
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	80 72       	andi	r24, 0x20	; 32
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	b9 f3       	breq	.-18     	; 0x2288 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    229a:	ec e2       	ldi	r30, 0x2C	; 44
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22b2:	eb e2       	ldi	r30, 0x2B	; 43
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 23       	and	r24, r24
    22ba:	dc f7       	brge	.-10     	; 0x22b2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    22bc:	ec e2       	ldi	r30, 0x2C	; 44
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <UART_sendString+0x6>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	80 81       	ld	r24, Z
    22ee:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		i++;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	88 23       	and	r24, r24
    230c:	39 f7       	brne	.-50     	; 0x22dc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <UART_receiveString+0xa>
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9b 83       	std	Y+3, r25	; 0x03
    232c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    232e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	8c 01       	movw	r16, r24
    233c:	02 0f       	add	r16, r18
    233e:	13 1f       	adc	r17, r19
    2340:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
    2344:	f8 01       	movw	r30, r16
    2346:	80 83       	st	Z, r24
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	8c 01       	movw	r16, r24
    235c:	02 0f       	add	r16, r18
    235e:	13 1f       	adc	r17, r19
    2360:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
    2364:	f8 01       	movw	r30, r16
    2366:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	80 81       	ld	r24, Z
    237a:	83 32       	cpi	r24, 0x23	; 35
    237c:	31 f7       	brne	.-52     	; 0x234a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	10 82       	st	Z, r1
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <__udivmodhi4>:
    23a0:	aa 1b       	sub	r26, r26
    23a2:	bb 1b       	sub	r27, r27
    23a4:	51 e1       	ldi	r21, 0x11	; 17
    23a6:	07 c0       	rjmp	.+14     	; 0x23b6 <__udivmodhi4_ep>

000023a8 <__udivmodhi4_loop>:
    23a8:	aa 1f       	adc	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	a6 17       	cp	r26, r22
    23ae:	b7 07       	cpc	r27, r23
    23b0:	10 f0       	brcs	.+4      	; 0x23b6 <__udivmodhi4_ep>
    23b2:	a6 1b       	sub	r26, r22
    23b4:	b7 0b       	sbc	r27, r23

000023b6 <__udivmodhi4_ep>:
    23b6:	88 1f       	adc	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	5a 95       	dec	r21
    23bc:	a9 f7       	brne	.-22     	; 0x23a8 <__udivmodhi4_loop>
    23be:	80 95       	com	r24
    23c0:	90 95       	com	r25
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	08 95       	ret

000023c8 <__udivmodsi4>:
    23c8:	a1 e2       	ldi	r26, 0x21	; 33
    23ca:	1a 2e       	mov	r1, r26
    23cc:	aa 1b       	sub	r26, r26
    23ce:	bb 1b       	sub	r27, r27
    23d0:	fd 01       	movw	r30, r26
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <__udivmodsi4_ep>

000023d4 <__udivmodsi4_loop>:
    23d4:	aa 1f       	adc	r26, r26
    23d6:	bb 1f       	adc	r27, r27
    23d8:	ee 1f       	adc	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	a2 17       	cp	r26, r18
    23de:	b3 07       	cpc	r27, r19
    23e0:	e4 07       	cpc	r30, r20
    23e2:	f5 07       	cpc	r31, r21
    23e4:	20 f0       	brcs	.+8      	; 0x23ee <__udivmodsi4_ep>
    23e6:	a2 1b       	sub	r26, r18
    23e8:	b3 0b       	sbc	r27, r19
    23ea:	e4 0b       	sbc	r30, r20
    23ec:	f5 0b       	sbc	r31, r21

000023ee <__udivmodsi4_ep>:
    23ee:	66 1f       	adc	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	88 1f       	adc	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	1a 94       	dec	r1
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <__udivmodsi4_loop>
    23fa:	60 95       	com	r22
    23fc:	70 95       	com	r23
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	bd 01       	movw	r22, r26
    2408:	cf 01       	movw	r24, r30
    240a:	08 95       	ret

0000240c <__prologue_saves__>:
    240c:	2f 92       	push	r2
    240e:	3f 92       	push	r3
    2410:	4f 92       	push	r4
    2412:	5f 92       	push	r5
    2414:	6f 92       	push	r6
    2416:	7f 92       	push	r7
    2418:	8f 92       	push	r8
    241a:	9f 92       	push	r9
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	ca 1b       	sub	r28, r26
    2436:	db 0b       	sbc	r29, r27
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	09 94       	ijmp

00002444 <__epilogue_restores__>:
    2444:	2a 88       	ldd	r2, Y+18	; 0x12
    2446:	39 88       	ldd	r3, Y+17	; 0x11
    2448:	48 88       	ldd	r4, Y+16	; 0x10
    244a:	5f 84       	ldd	r5, Y+15	; 0x0f
    244c:	6e 84       	ldd	r6, Y+14	; 0x0e
    244e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2450:	8c 84       	ldd	r8, Y+12	; 0x0c
    2452:	9b 84       	ldd	r9, Y+11	; 0x0b
    2454:	aa 84       	ldd	r10, Y+10	; 0x0a
    2456:	b9 84       	ldd	r11, Y+9	; 0x09
    2458:	c8 84       	ldd	r12, Y+8	; 0x08
    245a:	df 80       	ldd	r13, Y+7	; 0x07
    245c:	ee 80       	ldd	r14, Y+6	; 0x06
    245e:	fd 80       	ldd	r15, Y+5	; 0x05
    2460:	0c 81       	ldd	r16, Y+4	; 0x04
    2462:	1b 81       	ldd	r17, Y+3	; 0x03
    2464:	aa 81       	ldd	r26, Y+2	; 0x02
    2466:	b9 81       	ldd	r27, Y+1	; 0x01
    2468:	ce 0f       	add	r28, r30
    246a:	d1 1d       	adc	r29, r1
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	ed 01       	movw	r28, r26
    2478:	08 95       	ret

0000247a <ceil>:
    247a:	3b d0       	rcall	.+118    	; 0x24f2 <__fp_trunc>
    247c:	80 f0       	brcs	.+32     	; 0x249e <ceil+0x24>
    247e:	9f 37       	cpi	r25, 0x7F	; 127
    2480:	40 f4       	brcc	.+16     	; 0x2492 <ceil+0x18>
    2482:	91 11       	cpse	r25, r1
    2484:	0e f4       	brtc	.+2      	; 0x2488 <ceil+0xe>
    2486:	4d c0       	rjmp	.+154    	; 0x2522 <__fp_szero>
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	80 e8       	ldi	r24, 0x80	; 128
    248e:	9f e3       	ldi	r25, 0x3F	; 63
    2490:	08 95       	ret
    2492:	26 f0       	brts	.+8      	; 0x249c <ceil+0x22>
    2494:	1b 16       	cp	r1, r27
    2496:	61 1d       	adc	r22, r1
    2498:	71 1d       	adc	r23, r1
    249a:	81 1d       	adc	r24, r1
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <__fp_mintl>
    249e:	1b c0       	rjmp	.+54     	; 0x24d6 <__fp_mpack>

000024a0 <__fp_mintl>:
    24a0:	88 23       	and	r24, r24
    24a2:	71 f4       	brne	.+28     	; 0x24c0 <__fp_mintl+0x20>
    24a4:	77 23       	and	r23, r23
    24a6:	21 f0       	breq	.+8      	; 0x24b0 <__fp_mintl+0x10>
    24a8:	98 50       	subi	r25, 0x08	; 8
    24aa:	87 2b       	or	r24, r23
    24ac:	76 2f       	mov	r23, r22
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <__fp_mintl+0x1e>
    24b0:	66 23       	and	r22, r22
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__fp_mintl+0x18>
    24b4:	99 27       	eor	r25, r25
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <__fp_mintl+0x32>
    24b8:	90 51       	subi	r25, 0x10	; 16
    24ba:	86 2b       	or	r24, r22
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	2a f0       	brmi	.+10     	; 0x24cc <__fp_mintl+0x2c>
    24c2:	9a 95       	dec	r25
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	88 1f       	adc	r24, r24
    24ca:	da f7       	brpl	.-10     	; 0x24c2 <__fp_mintl+0x22>
    24cc:	88 0f       	add	r24, r24
    24ce:	96 95       	lsr	r25
    24d0:	87 95       	ror	r24
    24d2:	97 f9       	bld	r25, 7
    24d4:	08 95       	ret

000024d6 <__fp_mpack>:
    24d6:	9f 3f       	cpi	r25, 0xFF	; 255
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <__fp_mpack_finite+0xc>

000024da <__fp_mpack_finite>:
    24da:	91 50       	subi	r25, 0x01	; 1
    24dc:	20 f4       	brcc	.+8      	; 0x24e6 <__fp_mpack_finite+0xc>
    24de:	87 95       	ror	r24
    24e0:	77 95       	ror	r23
    24e2:	67 95       	ror	r22
    24e4:	b7 95       	ror	r27
    24e6:	88 0f       	add	r24, r24
    24e8:	91 1d       	adc	r25, r1
    24ea:	96 95       	lsr	r25
    24ec:	87 95       	ror	r24
    24ee:	97 f9       	bld	r25, 7
    24f0:	08 95       	ret

000024f2 <__fp_trunc>:
    24f2:	25 d0       	rcall	.+74     	; 0x253e <__fp_splitA>
    24f4:	a0 f0       	brcs	.+40     	; 0x251e <__fp_trunc+0x2c>
    24f6:	be e7       	ldi	r27, 0x7E	; 126
    24f8:	b9 17       	cp	r27, r25
    24fa:	88 f4       	brcc	.+34     	; 0x251e <__fp_trunc+0x2c>
    24fc:	bb 27       	eor	r27, r27
    24fe:	9f 38       	cpi	r25, 0x8F	; 143
    2500:	60 f4       	brcc	.+24     	; 0x251a <__fp_trunc+0x28>
    2502:	16 16       	cp	r1, r22
    2504:	b1 1d       	adc	r27, r1
    2506:	67 2f       	mov	r22, r23
    2508:	78 2f       	mov	r23, r24
    250a:	88 27       	eor	r24, r24
    250c:	98 5f       	subi	r25, 0xF8	; 248
    250e:	f7 cf       	rjmp	.-18     	; 0x24fe <__fp_trunc+0xc>
    2510:	86 95       	lsr	r24
    2512:	77 95       	ror	r23
    2514:	67 95       	ror	r22
    2516:	b1 1d       	adc	r27, r1
    2518:	93 95       	inc	r25
    251a:	96 39       	cpi	r25, 0x96	; 150
    251c:	c8 f3       	brcs	.-14     	; 0x2510 <__fp_trunc+0x1e>
    251e:	08 95       	ret

00002520 <__fp_zero>:
    2520:	e8 94       	clt

00002522 <__fp_szero>:
    2522:	bb 27       	eor	r27, r27
    2524:	66 27       	eor	r22, r22
    2526:	77 27       	eor	r23, r23
    2528:	cb 01       	movw	r24, r22
    252a:	97 f9       	bld	r25, 7
    252c:	08 95       	ret

0000252e <__fp_split3>:
    252e:	57 fd       	sbrc	r21, 7
    2530:	90 58       	subi	r25, 0x80	; 128
    2532:	44 0f       	add	r20, r20
    2534:	55 1f       	adc	r21, r21
    2536:	59 f0       	breq	.+22     	; 0x254e <__fp_splitA+0x10>
    2538:	5f 3f       	cpi	r21, 0xFF	; 255
    253a:	71 f0       	breq	.+28     	; 0x2558 <__fp_splitA+0x1a>
    253c:	47 95       	ror	r20

0000253e <__fp_splitA>:
    253e:	88 0f       	add	r24, r24
    2540:	97 fb       	bst	r25, 7
    2542:	99 1f       	adc	r25, r25
    2544:	61 f0       	breq	.+24     	; 0x255e <__fp_splitA+0x20>
    2546:	9f 3f       	cpi	r25, 0xFF	; 255
    2548:	79 f0       	breq	.+30     	; 0x2568 <__fp_splitA+0x2a>
    254a:	87 95       	ror	r24
    254c:	08 95       	ret
    254e:	12 16       	cp	r1, r18
    2550:	13 06       	cpc	r1, r19
    2552:	14 06       	cpc	r1, r20
    2554:	55 1f       	adc	r21, r21
    2556:	f2 cf       	rjmp	.-28     	; 0x253c <__fp_split3+0xe>
    2558:	46 95       	lsr	r20
    255a:	f1 df       	rcall	.-30     	; 0x253e <__fp_splitA>
    255c:	08 c0       	rjmp	.+16     	; 0x256e <__fp_splitA+0x30>
    255e:	16 16       	cp	r1, r22
    2560:	17 06       	cpc	r1, r23
    2562:	18 06       	cpc	r1, r24
    2564:	99 1f       	adc	r25, r25
    2566:	f1 cf       	rjmp	.-30     	; 0x254a <__fp_splitA+0xc>
    2568:	86 95       	lsr	r24
    256a:	71 05       	cpc	r23, r1
    256c:	61 05       	cpc	r22, r1
    256e:	08 94       	sec
    2570:	08 95       	ret

00002572 <_exit>:
    2572:	f8 94       	cli

00002574 <__stop_program>:
    2574:	ff cf       	rjmp	.-2      	; 0x2574 <__stop_program>
